:py:mod:`gpflux.layers.basis_functions`
=======================================

.. py:module:: gpflux.layers.basis_functions

.. autoapi-nested-parse::

   A kernel's features for efficient sampling, used by
   :class:`gpflux.sampling.KernelWithFeatureDecomposition`



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   random_fourier_features/index.rst
   utils/index.rst


Package Contents
----------------

.. py:class:: RandomFourierFeatures(kernel: gpflow.kernels.Kernel, output_dim: int, **kwargs: Mapping)

   Bases: :py:obj:`RandomFourierFeaturesBase`

   Random Fourier features (RFF) is a method for approximating kernels. The essential
   element of the RFF approach :cite:p:`rahimi2007random` is the realization that Bochner's theorem
   for stationary kernels can be approximated by a Monte Carlo sum.

   We will approximate the kernel :math:`k(\mathbf{x}, \mathbf{x}')`
   by :math:`\Phi(\mathbf{x})^\top \Phi(\mathbf{x}')`
   where :math:`\Phi: \mathbb{R}^{D} \to \mathbb{R}^{M}` is a finite-dimensional feature map.

   The feature map is defined as:

   .. math::

     \Phi(\mathbf{x}) = \sqrt{\frac{2 \sigma^2}{\ell}}
       \begin{bmatrix}
         \cos(\boldsymbol{\theta}_1^\top \mathbf{x}) \\
         \sin(\boldsymbol{\theta}_1^\top \mathbf{x}) \\
         \vdots \\
         \cos(\boldsymbol{\theta}_{\frac{M}{2}}^\top \mathbf{x}) \\
         \sin(\boldsymbol{\theta}_{\frac{M}{2}}^\top \mathbf{x})
       \end{bmatrix}

   where :math:`\sigma^2` is the kernel variance.
   The features are parameterised by random weights:

   - :math:`\boldsymbol{\theta} \sim p(\boldsymbol{\theta})`
     where :math:`p(\boldsymbol{\theta})` is the spectral density of the kernel.

   At least for the squared exponential kernel, this variant of the feature
   mapping has more desirable theoretical properties than its cosine-based
   counterpart :class:`RandomFourierFeaturesCosine` :cite:p:`sutherland2015error`.

   :param kernel: kernel to approximate using a set of random features.
   :param output_dim: total number of basis functions used to approximate
       the kernel.

   .. py:method:: build(self, input_shape: gpflux.types.ShapeType) -> None

      Creates the variables of the layer.
      See `tf.keras.layers.Layer.build()
      <https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer#build>`_.


   .. py:method:: call(self, inputs: gpflow.base.TensorType) -> tensorflow.Tensor

      Evaluate the basis functions at ``inputs``.

      :param inputs: The evaluation points, a tensor with the shape ``[N, D]``.

      :return: A tensor with the shape ``[N, M]``.



